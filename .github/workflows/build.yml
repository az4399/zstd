name: Build and Release zstd

on:
  workflow_dispatch:  # 手动触发
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.5.7'

permissions:
  contents: write  # 需要写权限来创建 release
  
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install musl-gcc
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
    
    - name: Get latest zstd version
      id: get_version
      run: |
        # 获取 zstd 最新版本
        LATEST_VERSION=$(curl -s https://api.github.com/repos/facebook/zstd/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
        echo "Latest zstd version: $LATEST_VERSION"
        echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
    
    - name: Download and extract zstd source
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "Downloading zstd $VERSION"
        wget https://github.com/facebook/zstd/releases/download/$VERSION/zstd-${VERSION#v}.tar.gz
        tar -xzf zstd-${VERSION#v}.tar.gz
        mv zstd-${VERSION#v} zstd-source
    
    - name: Compile zstd with musl
      run: |
        cd zstd-source
        
        # 设置编译环境变量
        export CC=musl-gcc
        export CFLAGS="-static -Os -ffunction-sections -fdata-sections -DZSTD_MULTITHREAD=0"
        export LDFLAGS="-static -Wl,--gc-sections -Wl,--strip-all"
        
        # 首先编译静态库
        echo "==> Building static library..."
        make -C lib libzstd.a CC=musl-gcc CFLAGS="$CFLAGS"
        
        # 然后只编译程序，避免动态库编译
        echo "==> Building zstd program..."
        make -C programs zstd CC=musl-gcc CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" ZSTD_LIB_COMPRESSION=1 ZSTD_LIB_DECOMPRESSION=1 ZSTD_LIB_DICTBUILDER=1 ZSTD_LEGACY_SUPPORT=0
        
        # 验证编译结果
        ls -la programs/zstd*
        file programs/zstd
        ldd programs/zstd || echo "Static binary (no dynamic dependencies)"
        
        # 创建发布目录
        mkdir -p ../release
        
        # 复制二进制文件
        cp programs/zstd ../release/zstd
        
        # 创建符号链接程序（zstdcat 和 unzstd 通常是 zstd 的符号链接）
        cd ../release
        ln -sf zstd zstdcat
        ln -sf zstd unzstd
        ln -sf zstd zstdmt
        
        # 复制文档文件
        cp ../zstd-source/README.md .
        cp ../zstd-source/LICENSE .
        cp ../zstd-source/CHANGELOG . || echo "CHANGELOG not found"
    
    - name: Test compiled binary
      run: |
        cd release
        echo "Testing zstd binary..."
        ./zstd --version
        
        # 简单的压缩测试
        echo "Hello, QNAP NAS!" > test.txt
        ./zstd test.txt
        ./zstd -d test.txt.zst -o test_decompressed.txt
        cat test_decompressed.txt
        
        # 验证文件一致性
        if cmp -s test.txt test_decompressed.txt; then
            echo "✅ Compression/decompression test passed!"
        else
            echo "❌ Compression/decompression test failed!"
            exit 1
        fi
    
    - name: Create release archive
      run: |
        cd release
        VERSION="${{ steps.get_version.outputs.version }}"
        ARCHIVE_NAME="zstd-${VERSION#v}-linux-x86_64-musl"
        
        # 创建压缩包
        tar -czf "../${ARCHIVE_NAME}.tar.gz" ./*
        
        # 计算校验和
        cd ..
        sha256sum "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.sha256"
        
        echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        name: "zstd ${{ steps.get_version.outputs.version }} for QNAP NAS"
        draft: false
        prerelease: false
        files: |
          ${{ env.archive_name }}.tar.gz
          ${{ env.archive_name }}.sha256
        body: |
          ## zstd ${{ steps.get_version.outputs.version }} - Static Build for QNAP NAS
          
          This is a statically compiled version of zstd using musl libc, optimized for QNAP NAS systems.
          
          **Features:**
          - ✅ Static binary (no dependencies required)
          - ✅ Compiled with musl-gcc for maximum compatibility
          - ✅ x86_64 architecture
          - ✅ Optimized for size (-Os)
          - ✅ Tested compression/decompression functionality
          
          **Installation on QNAP:**
          1. Download the `${{ env.archive_name }}.tar.gz` file
          2. Extract to your desired location on QNAP NAS
          3. Make executable: `chmod +x zstd`
          4. Run: `./zstd --version`
          
          **What's included:**
          - `zstd` - Main compression tool
          - `zstdcat` - Decompression to stdout (symlink)
          - `unzstd` - Decompression tool (symlink)
          - `zstdmt` - Multi-threaded version (symlink)
          - Documentation files
          
          **Source:** Facebook zstd ${{ steps.get_version.outputs.version }}
          **Build:** Static musl build
          **Architecture:** x86_64
